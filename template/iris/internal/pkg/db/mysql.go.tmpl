package db

import (
	"context"
	"fmt"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
	"log"
	"time"
	"{{.ModPrefix}}{{.Name}}/configs"
)

var db *gorm.DB

type MysqlConfig struct {
	Url         string
	User        string
	Password    string
	Host        string
	Port        int
	DBName      string
	MaxOpenConn int
	MaxIdleConn int
	MaxLifetime time.Duration
	LogMode     string
}

func NewMysqlDB(conf *MysqlConfig) {
	var err error
	l := logger.Default
	switch conf.LogMode {
	case "debug":
		l = l.LogMode(logger.Info)
	case "release":
		l = logger.Discard
	}
	db, err = gorm.Open(mysql.New(mysql.Config{
		DSN:                       conf.Url,
		DefaultStringSize:         256,  // string 类型字段的默认长度
		DisableDatetimePrecision:  true, // 禁用 datetime 精度，MySQL 5.6 之前的数据库不支持
		DontSupportRenameIndex:    true, // 重命名索引时采用删除并新建的方式，MySQL 5.7 之前的数据库和 MariaDB 不支持重命名索引
		DontSupportRenameColumn:   true, // 用 `change` 重命名列，MySQL 8 之前的数据库和 MariaDB 不支持重命名列
		SkipInitializeWithVersion: false,
	}), &gorm.Config{
		PrepareStmt: true, // 全局模式，所有 DB 操作都会创建并缓存预编译语句
		Logger:      l,
	})
	if err != nil {
		log.Fatal(err)
	}

	DB, err := db.DB()
	if err != nil {
		log.Fatal(err)
	}

	DB.SetMaxOpenConns(conf.MaxOpenConn)    //设置打开数据库连接的最大数量
	DB.SetMaxIdleConns(conf.MaxIdleConn)    // 设置空闲连接池中连接的最大数量
	DB.SetConnMaxLifetime(conf.MaxLifetime) //设置了连接可复用的最大时间
}

func MustInitMysqlDB(c configs.Mysql) {
	conf := &MysqlConfig{
		User:        c.User,
		Password:    c.Password,
		Host:        c.Host,
		Port:        c.Port,
		DBName:      c.DB,
		MaxOpenConn: 10,
		MaxIdleConn: 100,
		MaxLifetime: time.Hour,
		LogMode:     c.LogMode,
	}
	conf.Url = fmt.Sprintf(`%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&parseTime=True&loc=Local`, conf.User, conf.Password, conf.Host, conf.Port, conf.DBName)
	NewMysqlDB(conf)
}

func GetCtxDB(ctx context.Context) *gorm.DB {
	return db.WithContext(ctx)
}
